require 'rails_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.
# #
# # Also compared to earlier versions of this generator, there are no longer any
# # expectations of assigns and templates rendered. These features have been
# # removed from Rails core in Rails 5, but can be added back in via the
# # `rails-controller-testing` gem.

RSpec.describe TimetablesController, type: :controller do
	 describe "#clock_out" do
		 context "user clocks out" do
			  
				let(:id1) {'1'}
        let(:timetable1) {instance_double("Timetable", time_in: "2021-04-20 05:20:48", time_out: nil, notes:"", user_id:"1")}
        before(:each) do
          allow(Timetable).to receive(:find).with(id1).and_return(timetable1)
				user =  User.create!(name: 'SUNY Tester', email: 'stester@binghamton.edu')
        @auth = Authorization.create!(provider: "github", uid: "123456", user_id: user.id) 
        end
				it "calls update method" do
					allow(timetable1).to receive(:update)
					get :clock_out, id: id1
				end
				it "updates the time out " do
				
					allow(timetable1).to receive(:update).and_return(time_out: DateTime.now())
					get :clock_out, id: id1
		    end
				it "redirects to the edit page" do
				  allow(timetable1).to receive(:update).and_return(time_out: DateTime.now())
					get :clock_out, id: id1
				  expect(response).to redirect_to edit_timetable_path(timetable1)
					
				end
				
		
	   end
end
end